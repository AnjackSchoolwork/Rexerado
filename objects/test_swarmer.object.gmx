<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize variables

perception_range = 100

direction = random_range(1, 360)
speed = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Herd behavior

new_vector_x = lengthdir_x(1, direction)
new_vector_y = lengthdir_y(1, direction)

herd_count = 0

alignment_x = 0
alignment_y = 0

cohesion_x = 0
cohesion_y = 0

separation_x = 0
separation_y = 0

with(test_swarmer) {
    if(other != self and distance_to_object(other) &lt;= other.perception_range) {
    
        other.herd_count += 1
        // Here we implement the swarm behavior
        
        // Collect alignment info
        other.alignment_x += lengthdir_x(1, direction)
        other.alignment_y += lengthdir_y(1, direction)
        
        // Collect cohesion info
        other.cohesion_x += self.x
        other.cohesion_y += self.y
        
        // Separation
        other.separation_x += self.x - other.x
        other.separation_y += self.y - other.y
        
    }
}
if(herd_count) {
    // Set alignment
    alignment_x /= herd_count
    alignment_y /= herd_count
    
    // Set cohesion
    cohesion_x /= herd_count
    cohesion_y /= herd_count
    
    cohesion_x -= self.x
    cohesion_y -= self.y
    
    // Set separation
    separation_x /= herd_count
    separation_y /= herd_count
    
    separation_x *= -1
    separation_y *= -1
    
    // Calculate final vector
    new_vector_x += (alignment_x * Herd_Mind_Alpha.alignment_weight) + (cohesion_x * Herd_Mind_Alpha.cohesion_weight) + (separation_x * Herd_Mind_Alpha.separation_weight)
    new_vector_y += (alignment_y * Herd_Mind_Alpha.alignment_weight) + (cohesion_y * Herd_Mind_Alpha.cohesion_weight) + (separation_y * Herd_Mind_Alpha.separation_weight)
    
    new_vector_len = sqrt(sqr(new_vector_x) + sqr(new_vector_y))
    
    final_vector_x = new_vector_x / new_vector_len
    final_vector_y = new_vector_y / new_vector_len
    
    direction = point_direction(self.x, self.y, self.x + final_vector_x, self.y + final_vector_y)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Indicate direction

draw_set_color(c_black)
draw_arrow(self.x, self.y, self.x + lengthdir_x(25, direction), self.y + lengthdir_y(25, direction), 10)


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
