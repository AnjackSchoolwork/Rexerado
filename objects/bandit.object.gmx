<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>bandit_left</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize variables

mouth_x = x
mouth_y = y
mouth_offset = 0

obj_in_mouth = noone

target_object = noone

home_x = x
home_y = y

speed_value = 15

// Sprites
sprite_list = ds_map_create()

ds_map_add(sprite_list, "run_left", bandit_left)
ds_map_add(sprite_list, "sit_left", bandit_left)
ds_map_add(sprite_list, "run_right", bandit_right)
ds_map_add(sprite_list, "sit_right", bandit_right)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Search and Destroy

mouth_x = x + (mouth_offset * (sprite_width / 2))
mouth_y = y

// Look for cats to capture

dist_to_home = point_distance(x, y, home_x, home_y)

if(obj_in_mouth == noone) {
    if(target_object == noone) {
        if(dist_to_home &gt; sprite_width/2) {
            move_towards_point(home_x, home_y, speed_value / 2)
        }
        else {
            speed = 0
            results = get_objects_in_circle(mouth_x, mouth_y, 250)
            
            for(index = 0; index &lt; ds_list_size(results); index++) {
                result = results[| index]
                if(object_is_ancestor(result.object_index, cat_base) || (result.object_index == bone_base &amp;&amp; Fancy.obj_in_mouth != result) &amp;&amp; result.object_index != cat_codgey) {
                    target_object = result
                    move_towards_point(target_object.x, target_object.y, speed_value)
                }
            }
        }
    }
    else {
        if (point_distance(x, y, target_object.x, target_object.y) &lt;= sprite_width/2) {
            obj_in_mouth = target_object
        }
        else {
            move_towards_point(target_object.x, target_object.y, speed_value)
        }
    }
}
else if(dist_to_home &gt; sprite_width/2) {
    
    
    move_towards_point(home_x, home_y, speed_value)
    
    if(object_is_ancestor(obj_in_mouth.object_index, cat_base)) {
        obj_in_mouth.state_current = "captured"
    }
    orient_obj_in_mouth(placeholder_1, placeholder_1_5)
}
else {

    with(obj_in_mouth) {
        instance_destroy()
    }
    
    instance_destroy()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// reorient image and draw me
if(direction &lt; 271 and direction &gt; 90) {
    image_index = sprite_list[? "sit_left"]
    mouth_offset = -1
}
else {
    image_index = sprite_list[? "sit_right"]
    mouth_offset = 1
}

draw_sprite(image_index, sprite_index, x, y)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
