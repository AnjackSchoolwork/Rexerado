<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sassy_sit_rear</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>mobile_base</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize variables

// Motivation
motivation = 0

// Object of interest
target_object = noone

// Movement
speed_value = 3
move_target_x = undefined
move_target_y = undefined

// Perception
percept_offset_x = 0
percept_offset_y = 0
perception_rad = 100

// Define state
state = ds_map_create()
ds_map_add(state, "idle", state_idle)
ds_map_add(state, "wandering", state_wander)
ds_map_add(state, "napping", state_nap)
ds_map_add(state, "motivated", state_motivated)
ds_map_add(state, "playing", state_play)
ds_map_add(state, "captured", state_captured)

state_vars = ds_map_create()

// Default to wandering
state_current = "wandering"
enter_state_wander(self)

//Sprites
sprite_list = ds_map_create()

ds_map_add(sprite_list, "run_rear", sassy_walk_away)
ds_map_add(sprite_list, "run_front", sassy_walk_toward)
ds_map_add(sprite_list, "run_left", sassy_walk_left)
ds_map_add(sprite_list, "run_right", sassy_walk_right)
ds_map_add(sprite_list, "sit_rear", sassy_sit_rear)
ds_map_add(sprite_list, "sit_front", sassy_sit_front)
ds_map_add(sprite_list, "sit_left", sassy_sit_left)
ds_map_add(sprite_list, "sit_right", sassy_sit_right)

image_speed = 0.3
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>script_execute(state[? state_current])

perceived_objects = get_objects_in_circle(x + percept_offset_x, y + percept_offset_y, perception_rad)

if(motivation == 0) {
    for(index = 0; index &lt; ds_list_size(perceived_objects); index++) {
        obj_instance = perceived_objects[| index]
        obj_parent = object_get_parent(obj_instance.object_index)
        if(obj_parent == distraction_base) {
            state_current = "playing"
            enter_state_play(obj_instance)
            exit
        }
    }
}

for(index = 0; index &lt; ds_list_size(perceived_objects); index++) {
    obj_instance = perceived_objects[| index]
    if(obj_instance.object_index == cucumber) {
        direction = point_direction(obj_instance.x, obj_instance.y, x, y)
        if(speed == 0) {
            speed = 10
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// I am an cat

if(speed &gt; 0){
    sprite_modifier = "run_"
}
else {
    sprite_modifier = "sit_"
}

if((0 &lt;= direction and direction &lt; 45) or (360 &gt;= direction and direction &gt; 315)) {
    sprite_index = sprite_list[? sprite_modifier + "right"]
}
else if(45 &lt;= direction and direction &lt; 135) {
    sprite_index = sprite_list[? sprite_modifier + "rear"]
}
else if(135 &lt;= direction and direction &lt; 225) {
    sprite_index = sprite_list[? sprite_modifier + "left"]
}
else {
    sprite_index = sprite_list[? sprite_modifier + "front"]
}

draw_sprite(sprite_index, image_index, x, y)

if(DEBUG) {
    draw_circle(x + percept_offset_x, y + percept_offset_y, perception_rad, true)
    draw_arrow(x, y, x + lengthdir_x(10, direction), y + lengthdir_y(10, direction), 10)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
